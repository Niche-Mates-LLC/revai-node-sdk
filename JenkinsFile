pipeline {
    agent {
        node 'MacOS'
    }
    stages {
        stage('Build/Test') {
            steps {
                checkout scm
                sh """#!/bin/bash
                    source '$HOME/.nvm/nvm.sh'
                    nvm install v7.10.1
                    nvm use v7.10.1
                    npm run test
                """
                }
            }
        }

        stage('Version Check') {
            steps {
                 script {
                    def data = readJSON file:'package.json'
                    checkVersionAlreadyExists(data.version)
                }
            }
        }

        stage('Publish') {
            steps {
                sh """#!/bin/bash
                    source ~/.bash_profile
                    npm run build
                    node ../build_release_package_json.js
                    npm publish ./dist
                """
                }
            }
        }

        stage('Tag') {
            steps {
                script {
                    def data = readJSON file:'package.json'
                    tagRepo(data.version)
                }
            }
        }
    }
}

// get the url to the curent repo without the preceding https
def getRepoUrl() {
    def httpsPrefix = '^(https://)?'

    def matchesHttpsPrefix = "${GIT_URL}" =~ httpsPrefix

    return matchesHttpsPrefix.replaceFirst('')
}

// tags the current repo with the specified tag
def tagRepo(version) {
    echo "tagging repo with ${version}"

    // deletes current tag locally, this will make sure if the tag is deleted from remote it would be set again
    sh """#!/bin/bash
        source ~/.bash_profile
        git tag -d ${version} || (exit 0)
    """
    // see if it's still on remote - needed to avoid overwriting the tag
    sh """#!/bin/bash
        source ~/.bash_profile
        git fetch https://${env.GIT_CREDENTIALS}@${getRepoUrl()} --tags
    """
    // try to tag
    sh """#!/bin/bash
        source ~/.bash_profile
        git tag ${version}
    """
    sh """#!/bin/bash
        source ~/.bash_profile
        git push https://${env.GIT_CREDENTIALS}@${getRepoUrl()} ${version}
    """
}

// removes the specified project from the projects variable if the specified tag exists in git
def checkVersionAlreadyExists(version) {
    echo "checking tag ${version}"

    if (sh(script: """#!/bin/bash
        source ~/.bash_profile
        git ls-remote https://${env.GIT_CREDENTIALS}@${getRepoUrl()} --tags origin ${version}""", returnStdout: true).trim() != "") {
        echo "${version} is already released, please increase the version number for build to publish"
    } else {
        echo "will publish ${version}"
    }
}